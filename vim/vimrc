" vimrc
" https://github.com/NicolasCARPi/.dotfiles

" Set vim behaviour, not vi.
set nocompatible
filetype off "required for vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("~/.vim/plugins")

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-syntastic/syntastic'
"Plugin 'w0rp/ale'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'fatih/vim-go'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'airblade/vim-gitgutter'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" CtrlP config
let g:ctrlp_map = '<c-c>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" open in a new tab
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }

" YCM CONFIG
" fix python2/3 for YCM
let g:ycm_server_python_interpreter = '/usr/bin/python2'
" fix the Tab key being used
" use C-t and C-s to go through the list
" disable ctrl-t
map <C-t> <Nop>
" disable ctrl-s
map <C-s> <Nop>

let g:ycm_key_list_select_completion = ['<C-t>']
map <C-s> <Nop>
let g:ycm_key_list_previous_completion = ['<C-s>']

syntax on " syntax highlighting
set background=dark " dark background
colorscheme ktr " colorscheme

filetype plugin indent on " load filetype-specific indent files
" Templates
"au bufNewFile *.sh 0r ~/.vim/templates/bash.sh

" show espaces insécables
set listchars=nbsp:_
set list

" remove the Ex mode (also known as pain in the ass mode)
nnoremap Q <nop>

set wildmenu " visual autocomplete for command menu

set undofile
set undodir=~/.vim/undodir

set ignorecase " Case insensitive search
set smartcase " search is case sensitive only if you put a CAPITAL
" :tn for tabnew
ca tn tabnew
" :v for vsplit
ca v vsplit
" Enable mouse
set mouse=a
" utf8 ftw
set encoding=utf-8
" tab navigation Ctrl-n for next, Ctrl-p for previous
nmap <silent> <C-n> :tabnext<CR>
nmap <silent> <C-p> :tabprev<CR>
imap <silent> <C-n> <esc><C-n>
imap <silent> <C-p> <esc><C-p>

" disable X as I never use encryption, but sometime type X instead of x to save & quit
cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

" column selection is ctrl shift V

let mapleader="," " leader is comma

" disable auto commenting new comments line
au filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Create html tags when typing ,tag
map! ,h1 <h1></h1><esc>2ba
map! ,h2 <h2></h2><esc>2ba
map! ,h3 <h3></h3><esc>2ba
map! ,h4 <h4></h4><esc>2ba
map! ,div <div></div><esc>2ba
map! ,span <span></span><esc>2ba
map! ,p <p></p><esc>2ba
map! ,a <a href=''></a><esc>2bra

" vim mutt email
au BufRead /tmp/mutt-* set tw=72

augroup filetypedetect
autocmd BufRead,BufNewFile *mutt-*              setfiletype mail
augroup END

" for emails
map! ,b Bonjour,<Enter><Enter>
map! ,c Cordialement,<Enter>~Nicolas CARPi<Enter><esc>
map! ,r Regards,<Enter>~Nicolas CARPi<Enter><esc>
map! ,@ @+<Enter>~Nico<Enter><esc>

" Create backup files
set backup
set writebackup
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" fix the backspace problem
set backspace=indent,eol,start
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
"set number    "enable line numbering
"set cursorline " highlight current line


" For crontab bug in Mac OS X (crontab temp file must be edited in place)
au FileType crontab set nobackup nowritebackup


" FOLDS
set foldenable
set foldmethod=indent
set foldlevel=99

" save/restore foldings
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" get space to show/hide folds
nnoremap <Space> za

" show python docstring in the fold
let g:SimpylFold_docstring_preview = 1
" END FOLDS

" gundo http://sjl.bitbucket.org/gundo.vim/
" ,u
" requires vim to be compiled with +python
nnoremap <leader>u :GundoToggle<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_checkers = ['php', 'phpcs --standard=PSR2', 'phpmd']
"function! FindConfig(prefix, what, where)
"    let cfg = findfile(a:what, escape(a:where, ' ') . ';')
"    return cfg !=# '' ? ' ' . a:prefix . ' ' . shellescape(cfg) : ''
"endfunction

"autocmd FileType javascript let b:syntastic_javascript_jscs_args =
"    \ get(g:, 'syntastic_javascript_jscs_args', '') .
"    \ FindConfig('-c', '.jshintrc', expand('<afile>:p:h', 1))

" Ctrl-t to close HTML tags
"au FileType html,xml,xsl,php,erb source ~/.vim/bundle/closetag.vim

" use html syntax for twig templates
au FileType twig set syntax=html
au FileType html.twig set syntax=html
au FileType html.eex set syntax=html

" STATUS LINE
set laststatus=2
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
set statusline=
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " flags and buf no
set statusline+=%-40f\                    " path
set statusline+=%=%1*%y%*%*\              " file type
set statusline+=%10((%l,%c)%)\            " line and column
set statusline+=%P                        " percentage of file

set tabstop=4 " number of visual spaces per TAB
set softtabstop=4 " number of spaces in tab when editing
set shiftwidth=4
set expandtab " tabs are spaces
"set list listchars=tab:▷⋅,trail:⋅,nbsp:⋅
"set statusline=%F%m%r%h%w\ [TYPE=%Y\ %{&ff}]\
"\ [%l/%L\ (%p%%)

" PYTHON STUFF
au FileType py set autoindent
au FileType py set smartindent
au FileType py set textwidth=79 " PEP-8 Friendly

" BEPO
" #####################

" [HJKL] -> {CTSR}
" ————————————————
" {cr} = « gauche / droite »
noremap c h
noremap r l
" {ts} = « haut / bas »
noremap t j
noremap s k
" {CR} = « haut / bas de l'écran »
noremap C H
noremap R L
" {TS} = « joindre / aide »
noremap T J
noremap S K
" Corollaire : repli suivant / précédent
noremap zs zj
noremap zt zk

" {HJKL} <- [CTSR]
" ————————————————
" {J} = « Jusqu'à »            (j = suivant, J = précédant)
noremap j t
noremap J T
" {L} = « Change »             (h = bloc, H = jusqu'à la fin de ligne)
noremap l c
noremap L C
" {H} = « Remplace »           (l = caractère, L = texte)
noremap h r
noremap H R
" {K} = « Substitue »          (k = caractère, K = ligne)
noremap k s
noremap K S
" Corollaire : correction orthographique
noremap ]k ]s
noremap [k [s

" Désambiguation de {g}
" —————————————————————
" ligne écran précédente / suivante (à l'intérieur d'une phrase)
noremap gs gk
noremap gt gj
" onglet précédant / suivant
noremap gb gT
noremap gé gt
" optionnel : {gB} / {gÉ} pour aller au premier / dernier onglet
noremap gB :exe "silent! tabfirst"<CR>
noremap gÉ :exe "silent! tablast"<CR>
" optionnel : {g"} pour aller au début de la ligne écran
noremap g" g0

" tab fait esc, maj+tab fait tab
inoremap <Tab> <Esc>
inoremap <S-Tab> <Tab>
vnoremap <Tab> <Esc>
vnoremap <S-Tab> <Tab>
" tab navigation like firefox
nmap <C-S-tab> :tabprevious<CR>
nmap <C-tab> :tabnext<CR>
map <C-S-tab> :tabprevious<CR>
map <C-tab> :tabnext<CR>
imap <C-S-tab> <Esc>:tabprevious<CR>i
imap <C-tab> <Esc>:tabnext<CR>i
"nmap <C-t> :tabnew<CR>
"imap <C-t> <Esc>:tabnew<CR>
map <S-h> gT
map <S-l> gt
